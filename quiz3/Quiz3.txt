
Name: Revathy Ramamoorthy
Last 4 digits ID:1001663569
Computer IP address:
CSE 6331, Cloud Computing					


Quiz Q3, Spring 2020   (c) DL, UTA, 2020


  C&P means cut and paste only those relevant lines from your program(s) into this quiz.


 1.  I understand that I am on my honor during this quiz, I will not collaborate, use 
     non-allowed sources, and I will not discuss or share this quiz with anyone for the next 
     4 hours.
     You MAY: use Google to search, use previous source code, 
     YOU MAY NOT use:
     Email, Facebook, Hangouts, IM, chats, Skype or ANY other human connection.

     This is a timed test. Late tests will have points deducted for being late.
     Very late tests will not be graded.

     When you are complete, with any part, please raise your hand, so we may visually inspect that part.

     The second part of the test, you should electronically submit, you will need to copy and paste 
     only those lines of code to implement that part of the test, usually a few (two to eight) lines of code. 
     Place it immediately after the question.

     Submit this Quiz (renamed) with code cut and pasted, ONLY text. DO NOT submit zips, binaries, libraries,
     or anything other than text.

     When any parts(questions) are complete complete, submit this test, you may make multiple submissions.

     If you have computer, or other, problems, please raise your hand immediately.

     If you understand and agree, please initial here:
     _________________

 2. Get files from this same folder.
   
 3. Name your program/submission with your name and last digits of your ID.

 4. Using the cloud services provider, all functionality possible should be implemented on that provider.
    (Of course, displaying web pages through a browser and the user interface is "local")

Submit code, do not show:

 5. Show a web page and interface (which resides on the cloud provider) with your name and 
    student ID in large font at the top of every web page dispayed (for this quiz)
    The cloud service provider MicroSoft Azure. 

 6. Import qi.csv and qm.csv into tables in a Relational Data Base (SQL), if you have already done this, 
    (briefly) explain/describe how you did this. Please note that for some parts of the following you will need 
    to create indexes (keys) appropriately. Please do not change the values in latitude and longitude.

Show and submit code:

 7. Allow a user, through a web form, to give a magnitude range (for example 0 to 0.0001) and show the time to do the 
    "query" and show the latitude and longitude and id of all quakes within that range.

@app.route("/display", methods=["POST", "GET"])
def display():
    range1 = float(request.form.get('magrange1', ''))
    range2 = float(request.form.get('magrange2', ''))
    query1 = "SELECT * FROM qm WHERE MAG BETWEEN '" + str(range1) + "' AND '" + str(range2) + "'"
    start_time = time.time()
    cursor.execute(query1)
    rows = cursor.fetchall()
    end_time = time.time()
    elapsed_time = end_time - start_time
    return render_template('display.html', table=rows, rowcount=len(rows), elapsed_time=elapsed_time)

 8. A user will give you the number of times to do the "query", you will do the previous problem (part 7) changing the
    magnitude for EACH query to a range in steps of 0.1 for example for number of times 20, and a magnitude range from
    1.5 to 6.0 you will generate 20 queries (total) into the data, the first being mag between 1.5 and 1.6, the second 
    between 1.6 and 1.7, etc (note that you will not reach the upper limit of 6.0 in this case.) 
    Please show time for each query and then show total time taken for all queries.

@app.route("/depthErrorRandom", methods=["POST", "GET"])
def depthErrorRandom():
    num = int(request.form.get('num', ''))
    range1 = float(request.form.get('depthrange1', ''))
    range2 = float(request.form.get('depthrange2', ''))

    rand1=[]
    rand2=[]
    timediff=[]
    itrCount=[]
    count=[]


    start_time = time.time()
    start_time2 = time.time()

    for i in range(0, int(num)):
        itrCount.append(i)
        #randid1 = random.randrange(range1,range2)
        #rand1.append(randid1)
        #randid2 = random.randrange(range1,range2)
        #rand2.append(randid2)
        query1 = "SELECT * FROM QI WHERE MAG BETWEEN '" + str(range1) + "' AND '" + str(range2) + "'"
        cursor.execute(query1)
        rows = cursor.fetchall()
        count.append(len(rows))
        end_time = time.time()
        elapsed_time = end_time - start_time
        timediff.append(elapsed_time)
        range1 = range1 + 0.1
        rand1.append(range1)
        range2 = range2 + 0.1
        rand2.append(range2)
    end_time2 = time.time()
    return render_template('randomdepthloop.html', times=itrCount, timediff=timediff,
                           rand1=rand1, rand2=rand2, count=count)


 9. Repeat 7 using an in-memory caching mechanism (NOT an in-memory database) repeat the previous step, then show us.
@app.route('/restquery', methods=['POST', 'GET'])
def restquery():
    times = int(request.form.get('times', ''))
    mg1 = float(request.form.get('mg1', ''))
    mg2 = float(request.form.get('mg2', ''))
    rows1 = []
    totaltime = 0

    start = time.time()

    for i in range(0, times):
        val = random.uniform(mg1, mg2)
        magval = round(val, 2)

        query1 = "SELECT * FROM qm WHERE mag = '"+str(magval)+"'"
        hash1 = hashlib.sha256(query1.encode()).hexdigest()

        if r.get(hash1):
            print("This was return from redis")
        else:
            cursor.execute(query1)
            t1 = cursor.fetchall()
            rows1 = []
            for x in t1:
                rows1.append(str(x))
                r.set(hash1, pickle.dumps(list(rows1)))
                r.expire(hash1, 36)
                # print("This is the cached data")

    end = time.time()
    totaltime = (end - start)
    avg = (totaltime / times)

    elapsed_time = 0

    for number in range(0, times):
        start_time = time.time()

        query1 = "SELECT * FROM qm WHERE mag = '"+str(magval)+"'"
        cursor.execdirect(query1)
        t12 = cursor.fetchall()

        end_time = time.time()
        elapsed_time = (end_time-start_time)+elapsed_time

    avg_time = (elapsed_time/times)
    query1 = "SELECT * FROM qm WHERE mag = '"+str(magval)+"'"
    val = random.uniform(mg1, mg2)
    magval = round(val, 2)
    cursor.execute(query1)
    rows = cursor.fetchall()

    return render_template('restquery.html', times=times,
                           totaltime=totaltime, avgtime=avg, elapsed_time=elapsed_time, avg_time=avg_time, table = rows)


 10. Repeat 8 using an in-memory caching mechanism (NOT an in-memory database) repeat the previous step, then show us.

@app.route("/depthErrorRandom", methods=["POST", "GET"])
def depthErrorRandom():
    num = int(request.form.get('num', ''))
    range1 = float(request.form.get('depthrange1', ''))
    range2 = float(request.form.get('depthrange2', ''))

    rand1=[]
    rand2=[]
    timediff=[]
    itrCount=[]
    count=[]


    start_time = time.time()

    for i in range(0, int(num)):
        itrCount.append(i)
        query3 = "SELECT * FROM QI WHERE MAG BETWEEN '" + str(range1) + "' AND '" + str(range2) + "'"
	queryhash = hashlib.sha256(query3.encode()).hexdigest()
        result = r.get(queryhash)								//redis
	cursor.execute(query1)		
        rows = cursor.fetchall()
        range1 = range1 + 0.1
        rand1.append(range1)
        range2 = range2 + 0.1
        rand2.append(range2)

        if not result:
            cursor.execute(query3)
            result = cursor.fetchall()
            r.set(queryhash, pickle.dumps(list(result)))			

    end_time = time.time()
    elapsed_time = end_time - start_time

    return render_template('restricted.html', elapsed_time=elapsed_time)
	

 11. A user will give you a latitude, longitude and magnitude range, please show the time, magnitude and place and id
     of all quakes in that area. Also please show the time taken for the query.

@app.route("/listofqueries", methods=["POST", "GET"])
def listofqueries():
    lat = float(request.form.get('lat', ''))
    longi = float(request.form.get('long', ''))
    magrange1 = float(request.form.get('magrange1', ''))
    magrange2 = float(request.form.get('magrange2', ''))
    query1 = "SELECT * FROM qi WHERE mag BETWEEN '" + str(magrange1) + "' AND '" + str(magrange2) + "' AND latitude='" + str(lat) + "' AND longitude='" + 	str(longi) + "'"
    start_time = time.time()
    cursor.execute(query1)
    rows = cursor.fetchall()
    end_time = time.time()
    elapsed_time = end_time - start_time
    return render_template('listofqueries.html', table=rows, rowcount=len(rows), elapsed_time=elapsed_time)

    
 12. Show GTA parts 7, 8, 9, 10, 11
     (as soon as you complete any part.)

 13. When complete, return (send) this quiz
     If you finish early, send this immediately, otherwise send between
     the end of class and no more than 1 minute after that.

 Good Luck!
